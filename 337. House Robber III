/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    int solve(TreeNode* root)
    {
        if(!root) return 0;
        int inc = 0 , exc = 0;
        inc += root->val;
        if(root->left)
        {
            inc += solve(root->left->left) + solve(root->left->right);
        }
        if(root->right)
        {
            inc+= solve(root->right->left) +solve(root->right->right);
        }
        exc = solve(root->left)+solve(root->right);
        return max(inc,exc);
    }

    //memo
    int solveTB(TreeNode* root,unordered_map<TreeNode*,int>& dp)
    {
        if(!root) return 0;
        int inc = 0 , exc = 0;
        if(dp.find(root) != dp.end()) return dp[root];
        inc += root->val;
        if(root->left)
        {
            inc += solveTB(root->left->left,dp) + solveTB(root->left->right,dp);
        }
        if(root->right)
        {
            inc+= solveTB(root->right->left,dp) +solveTB(root->right->right,dp);
        }
        exc = solveTB(root->left,dp)+solveTB(root->right,dp);
        return dp[root]= max(inc,exc);
    }
    int rob(TreeNode* root) {
        unordered_map<TreeNode*,int> dp;
        return solveTB(root,dp);
        
    }
};
