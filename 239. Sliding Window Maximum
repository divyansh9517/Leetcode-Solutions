class Solution {
public:
    vector<int> maxSlidingWindow(vector<int>& nums, int k) {
        vector<int> ans;
        deque<int> dq;
        // first window process karo
        for(int i = 0 ; i < k;i++)
        {
            int element = nums[i];
            while(!dq.empty() && element > nums[dq.back()])
            {
                dq.pop_back();
            }
            dq.push_back(i);
        }
        for(int i = k ; i < nums.size() ;i++)
        {
            // ans storing
            ans.push_back(nums[dq.front()]);
            //removal 
            //out of range
            if(!dq.empty() && i-dq.front()>=k)
            {
                dq.pop_front();
            }
            //chotte element pop krdo
            int element =  nums[i];
            while(!dq.empty() && element > nums[dq.back()])
            {
                dq.pop_back();
            }
            //add item
            dq.push_back(i);
        }
        //last window ko store krle
        ans.push_back(nums[dq.front()]);
        return ans;
    }
};
