/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
    vector<int> inorderTraversal(TreeNode* root) {
        vector<int> ans;
        TreeNode* curr = root;
        while(curr)
        {
            if(curr->left == nullptr)
            {
                ans.push_back(curr->val);
                curr = curr->right;
            }
            // left Node is Not Null
            else
            {
                //find inorder predecessor
                TreeNode* pred = curr->left;
                while(pred->right != curr && pred->right)
                {
                    pred = pred->right;
                }
                // if right node is NULL , then go left after establishing link from pred to currr
                if(pred->right == nullptr)
                {
                    pred->right = curr;
                    curr = curr->left;
                } 
                else
                {
                    // left is already visited , go right after visiting curr node.
                    pred->right = nullptr;
                    ans.push_back(curr->val);
                    curr= curr->right;
                }
            }
        }
        return ans;
    }
};
