class Solution {
public:

    int solve(vector<int> satis , int i,int time)
    {
        if(i == satis.size())
        {
            return 0;
        }

        int include = time * satis[i] + solve(satis ,i+1 ,time+1);
        int exclude = solve(satis,i+1,time);
        return max(include,exclude);
    }


    int solveTD(vector<int> satis , int i,int time,vector<vector<int>>&dp)
    {
        if(i == satis.size())
        {
            return 0;
        }
        if(dp[i][time] != -1)
        {
            return dp[i][time];
        }

        int include = time * satis[i] + solveTD(satis ,i+1 ,time+1,dp);
        int exclude = solveTD(satis,i+1,time,dp);
        return dp[i][time] = max(include,exclude);
    }


    int solveBU(vector<int>&sat)
    {
        vector<vector<int>>dp(sat.size()+1,vector<int>(sat.size()+2,0));
        for(int i = sat.size()-1 ; i>=0 ;--i)
        {
            for(int j = sat.size();j>= 1 ; --j)
            {
                int include = j * sat[i]+dp[i+1][j+1];
                int exclude = dp[i+1][j];
                dp[i][j] = max(include,exclude);
            }
        }
        return dp[0][1];
    }
    int maxSatisfaction(vector<int>& satisfaction) {
        sort(satisfaction.begin(),satisfaction.end());
        vector<vector<int>>dp(satisfaction.size(),vector<int>(satisfaction.size()+1,-1));
        return solveBU(satisfaction);
    }
};
