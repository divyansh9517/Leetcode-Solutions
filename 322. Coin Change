class Solution {
public:
    //recursion
    int solve(vector<int>& coins, int amount)
    {
        if(amount == 0)
        {
            return 0;
        }
        int  mini = INT_MAX;

        for(int i = 0 ; i < coins.size() ; i++)
        {
            int recur = 0 ; 

            if(amount - coins[i] >= 0)
            {
                recur = solve(coins,amount-coins[i]);
                if(recur != INT_MAX)
                {
                    int ans = 1+recur;
                    mini = min(mini,ans);
                }
            }
        }
        return mini;
    }

    //memoization
    int solveMem(vector<int>& coins, int amount,vector<int>&dp)
    {
        if(amount == 0)
        {
            return 0;
        }
        int  mini = INT_MAX;
        if(dp[amount] != -1)
        {
            return dp[amount];
        }
        for(int i = 0 ; i < coins.size() ; i++)
        {
            int recur = 0 ; 

            if(amount - coins[i] >= 0)
            {
                recur = solveMem(coins,amount-coins[i],dp);
                if(recur != INT_MAX)
                {
                    int ans = 1+recur;
                    mini = min(mini,ans);
                }
            }
        }
        dp[amount] = mini;
        return dp[amount];
    }
    //tabulation
    int solveTab(vector<int>& coins, int amount)
    {
        int n = amount;
        vector<int> dp(n+1,INT_MAX);
        dp[0] = 0;
        
        //int value;
        for(int value = 1 ; value <= amount ;value++)
        {
            int mini = INT_MAX;
            for(int i = 0 ; i < coins.size() ; i++)
            {
                //int recur = 0 ; 

                if(value - coins[i] >= 0)
                {
                    int recur = dp[value-coins[i]];
                    if(recur != INT_MAX)
                    {
                        int ans = 1+recur;
                        mini = min(mini,ans);
                    }
                }
            }
         dp[value] = mini;
        }
        
        return dp[amount];

    }
    
    int coinChange(vector<int>& coins, int amount) {
        vector<int> dp(amount+1,-1);
        int ans = solveTab(coins,amount);//solveMem(coins,amount,dp);//solve(coins,amount);
        if(ans == INT_MAX)
        {
            return -1;
        }
        else
        {
            return ans;
        }
        

    }
};
