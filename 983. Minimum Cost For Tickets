class Solution {
public:
    int solve(vector<int>& days, vector<int>& costs,int i)
    {
        if(i >= days.size())
        {
            return 0;
        }
        int cost1 = costs[0]+solve(days,costs,i+1);
        int j = i ;
        // for 7 days 
        int passDays = days[i]+7-1;
        while(j<days.size() && days[j] <= passDays)
        {
            j++;
        }
        int cost7 = costs[1]+solve(days,costs ,j);

        // for 30 days
        passDays = days[i]+30-1;
        while(j<days.size() && days[j] <= passDays)
        {
            j++;
        }
        int cost30 = costs[2]+solve(days,costs, j);
        return min(cost1,min(cost7,cost30));
    }

    // by memoaization
    int solveMemo(vector<int>& days, vector<int>& costs,int i,vector<int> &dp)
    {
        if(i >= days.size())
        {
            return 0;
        }
        if(dp[i]!=-1)
        {
            return dp[i];
        }
        int cost1 = costs[0]+solveMemo(days,costs,i+1,dp);
        int j = i ;

        // for 7 days 
        int passDays = days[i]+7-1;
        while(j<days.size() && days[j] <= passDays)
        {
            j++;
        }
        int cost7 = costs[1]+solveMemo(days,costs ,j,dp);

        // for 30 days
        passDays = days[i]+30-1;
        while(j<days.size() && days[j] <= passDays)
        {
            j++;
        }
        int cost30 = costs[2]+solveMemo(days,costs, j,dp);
        return dp[i]=min(cost1,min(cost7,cost30));
    }


    //by tab
    int solveTab(vector<int>& days, vector<int>& costs,int i,vector<int> &dp)
    {
        dp[days.size()]=0;
        for(int i = days.size()-1 ; i>=0;i--)
        {
            int cost1 = costs[0]+dp[i+1];
            int j = i ;

            // for 7 days 
            int passDays = days[i]+7-1;
            while(j<days.size() && days[j] <= passDays)
            {
                j++;
            }
            int cost7 = costs[1]+dp[j];

            // for 30 days
            passDays = days[i]+30-1;
            while(j<days.size() && days[j] <= passDays)
            {
                j++;
            }
            int cost30 = costs[2]+dp[j];
            
            dp[i] = min(cost1,min(cost7,cost30));
        }
        
        return dp[0];
    }

    int mincostTickets(vector<int>& days, vector<int>& costs) {
        vector<int> dp(days.size()+1,-1);
        return solveTab(days,costs,0,dp);   
    }
};
