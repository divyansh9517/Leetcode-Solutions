class Solution {
public:
    int solve(int n)
    {
        // baseCondition 
        if(n == 0)
        {
            return 1;
        }
        if(n < 0)
        {
            return 0;
        }

        int i = 1 ;
        int ans = INT_MAX;
        int end = sqrt(n);
        while(i <= end)
        {
            int perfectSquare = i * i ;
            int num = 1 + solve(n - perfectSquare);
            if(num < ans)
            {
                ans = num;
            }
            ++i;
        }
        return ans;

    }
    // by memoaization
    int solveMemo(int n,vector<int> &dp)
    {
        // baseCondition 
        if(n == 0)
        {
            return 1;
        }
        if(n < 0)
        {
            return 0;
        }
        if(dp[n] != -1)
        {
            return dp[n];
        }

        int i = 1 ;
        int ans = INT_MAX;
        int end = sqrt(n);
        while(i <= end)
        {
            int perfectSquare = i * i ;
            int num = 1 + solveMemo(n - perfectSquare,dp);
            if(num < ans)
            {
                ans = num;
            }
            ++i;
        }
        return dp[n]=ans;

    }

    //by tab
    int solveTab(int n,vector<int> &dp)
    {
        // baseCondition 
        
        dp[0] = 1;

        for(int i = 1 ; i <= n ;i++)
        {
            int start = 1 ;
            int ans = INT_MAX;
            int end = sqrt(i);
            while(start <= end)
            {
                int perfectSquare = start * start ;
                int num = 1 + dp[i - perfectSquare];
                if(num < ans)
                {
                    ans = num;
                }
                ++start;
            }
            dp[i]=ans;

        }
       
        return dp[n];

    }

    int numSquares(int n) {
        vector<int> dp(n+1,-1);
        return solveTab(n,dp)-1;
    }
};
