class Solution {
public:
    int singleNumber(vector<int>& nums) {
        int res = 0 ;
        for(int  i = 0 ; i < nums.size();i++)
        {
            res^=nums[i];
        }
        return res;
    }
};

// method 2
class Solution {
public:
    int singleNumber(vector<int>& nums) {
        for(int i = 0 ; i < nums.size() ; i++)
        {
            int nu = nums[i];
            int count = 0; 
            for(int  j = 0 ; j< nums.size() ; j++)
            {
                if(nums[j]==nu)
                {
                    count++;
                }
            }
            if(count == 1)
            {
                return nu;
            }
        }
        return 1;
    }
};

//method 3
class Solution {
public:
    int singleNumber(vector<int>& nums) {
       unordered_map<int, int> hash; 

        
        for (int i = 0; i < nums.size(); i++) {
            hash[nums[i]]++;
        }

        
        for (int i = 0; i < nums.size(); i++) {
            if (hash[nums[i]] == 1) {
                return nums[i];
            }
        }

        return -1;
    }
};
