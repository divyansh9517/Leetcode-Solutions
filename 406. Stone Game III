class Solution {
public:

    int solve(vector<int>& sv,int i )
    {
        if (i == sv.size()) return 0;
        int ans = INT_MIN;
        int total = 0;
        for(int X = 1 ; X <= 3 ; X++)
        {
            if(i+X-1 >= sv.size()) break;
            total += sv[i+X-1];
            ans = max(ans,total - solve(sv,i+X));
        }
        return ans;
    }
    // by memo
    int solveME(vector<int>& sv,int i,vector<int> &dp )
    {
        if (i == sv.size()) return 0;
        int ans = INT_MIN;
        int total = 0;
        if(dp[i] != -1)
        {
            return dp[i];
        }

        for(int X = 1 ; X <= 3 ; X++)
        {
            if(i+X-1 >= sv.size()) break;
            total += sv[i+X-1];
            ans = max(ans,total - solveME(sv,i+X,dp));
        }
        return dp[i]=ans;
    }
    // by tabulation
    int solveTAB(vector<int>& sv)
    {
        vector<int> dp(sv.size()+1,0);
        for(int i = sv.size()-1 ;i >= 0;i--)
        {
            int ans = INT_MIN;
            int total = 0;
            for(int X = 1 ; X <= 3 ; X++)
            {
                if(i+X-1 >= sv.size()) break;
                total += sv[i+X-1];
                ans = max(ans,total - dp[i+X]);
            }
            dp[i]=ans;

        }
        
        return dp[0];
    }

    string stoneGameIII(vector<int>& stoneValue) {
        vector<int> dp(stoneValue.size()+1,-1);
        int ans = solveTAB(stoneValue);
        if(ans>0)
        {
            return "Alice";

        }
        if(ans < 0)
        {
            return "Bob";
        }
        else
        {
            return "Tie";
        }
    }
};
