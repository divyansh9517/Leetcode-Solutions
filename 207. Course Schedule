class Solution {
public:

    void topoByBFS(int n,vector<int> &topOrder,unordered_map<int,list<int>> &adjList)
    {
        queue<int> q;
        unordered_map<int,int> indegree;
        // initialising indegree
        for(auto i : adjList)
        {
            for(auto nbr : i.second)
            {
                indegree[nbr]++;
            }
        }
        for(int node = 0 ; node < n ; node++)
        {
            if(indegree[node]== 0)
            {
                q.push(node);
            }
        }

        int count = 0 ;
        while(!q.empty())
        {
            int frontNode = q.front();
            q.pop();
            topOrder.push_back(frontNode);

            for(auto nbr : adjList[frontNode])
            {
                indegree[nbr]--;
                if(indegree[nbr]==0)
                {
                    q.push(nbr);
                }
            }
            
        }
    }
    bool canFinish(int numCourses, vector<vector<int>>& prerequisites) {
        unordered_map<int,list<int>> adjList;
        for(vector<int> i:prerequisites)
        {
            int u = i[0];
            int v = i[1];
            adjList[v].push_back(u);

        }
        vector<int> topoSort;
        topoByBFS(numCourses,topoSort,adjList);
        if(topoSort.size() == numCourses)
        {
            return true;
        }
        else{
            return false;
        }

    }
};
