class Solution {
public:
    // int f(int ind , vector<int> &nums, vector<int> &dp){
    //    // vector<int> dp(n+1,-1);
    //     if(ind == 0){
    //         return nums[ind];
    //     }
    //     if(ind < 0)
    //     {
    //         return 0;
    //     }
    //     if(dp[ind]!=-1)
    //     {
    //         return dp[ind];
    //     }
    //     int pick = nums[ind] + f(ind - 2,nums,dp);
    //     int notpick = 0+f(ind - 1,nums,dp);
    //     return dp[ind]=max(pick,notpick);
    // }
    int rob(vector<int>& nums) 
    {
        // tabulation
        int n = nums.size();
        int prev = nums[0];
        int prev2 = 0;
        for(int i = 1; i<n;i++)
        {
            int takes = nums[i];
            if(i > 1)
            {
                takes+=prev2;
            }
            int nontake = 0+prev;
            int curr = max(takes,nontake);
            prev2 = prev;
            prev = curr;
        }
        return prev;
        // int n = nums.size();
        // vector<int> dp(n,-1);
        // return f(n-1,nums,dp);
    }

};
